// Generated by gencpp from file traxxas_control/servo_esc_coeffs.msg
// DO NOT EDIT!


#ifndef TRAXXAS_CONTROL_MESSAGE_SERVO_ESC_COEFFS_H
#define TRAXXAS_CONTROL_MESSAGE_SERVO_ESC_COEFFS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace traxxas_control
{
template <class ContainerAllocator>
struct servo_esc_coeffs_
{
  typedef servo_esc_coeffs_<ContainerAllocator> Type;

  servo_esc_coeffs_()
    : servo_neutral(0)
    , esc_neutral(0)
    , angle_mult(0)
    , throt_mult(0)  {
    }
  servo_esc_coeffs_(const ContainerAllocator& _alloc)
    : servo_neutral(0)
    , esc_neutral(0)
    , angle_mult(0)
    , throt_mult(0)  {
  (void)_alloc;
    }



   typedef int32_t _servo_neutral_type;
  _servo_neutral_type servo_neutral;

   typedef int32_t _esc_neutral_type;
  _esc_neutral_type esc_neutral;

   typedef int32_t _angle_mult_type;
  _angle_mult_type angle_mult;

   typedef int32_t _throt_mult_type;
  _throt_mult_type throt_mult;





  typedef boost::shared_ptr< ::traxxas_control::servo_esc_coeffs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::traxxas_control::servo_esc_coeffs_<ContainerAllocator> const> ConstPtr;

}; // struct servo_esc_coeffs_

typedef ::traxxas_control::servo_esc_coeffs_<std::allocator<void> > servo_esc_coeffs;

typedef boost::shared_ptr< ::traxxas_control::servo_esc_coeffs > servo_esc_coeffsPtr;
typedef boost::shared_ptr< ::traxxas_control::servo_esc_coeffs const> servo_esc_coeffsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::traxxas_control::servo_esc_coeffs_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::traxxas_control::servo_esc_coeffs_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::traxxas_control::servo_esc_coeffs_<ContainerAllocator1> & lhs, const ::traxxas_control::servo_esc_coeffs_<ContainerAllocator2> & rhs)
{
  return lhs.servo_neutral == rhs.servo_neutral &&
    lhs.esc_neutral == rhs.esc_neutral &&
    lhs.angle_mult == rhs.angle_mult &&
    lhs.throt_mult == rhs.throt_mult;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::traxxas_control::servo_esc_coeffs_<ContainerAllocator1> & lhs, const ::traxxas_control::servo_esc_coeffs_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace traxxas_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::traxxas_control::servo_esc_coeffs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::traxxas_control::servo_esc_coeffs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::traxxas_control::servo_esc_coeffs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::traxxas_control::servo_esc_coeffs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::traxxas_control::servo_esc_coeffs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::traxxas_control::servo_esc_coeffs_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::traxxas_control::servo_esc_coeffs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2d202238d5f284960838988ffb4a6570";
  }

  static const char* value(const ::traxxas_control::servo_esc_coeffs_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2d202238d5f28496ULL;
  static const uint64_t static_value2 = 0x0838988ffb4a6570ULL;
};

template<class ContainerAllocator>
struct DataType< ::traxxas_control::servo_esc_coeffs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "traxxas_control/servo_esc_coeffs";
  }

  static const char* value(const ::traxxas_control::servo_esc_coeffs_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::traxxas_control::servo_esc_coeffs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 servo_neutral\n"
"int32 esc_neutral\n"
"\n"
"int32 angle_mult\n"
"int32 throt_mult\n"
;
  }

  static const char* value(const ::traxxas_control::servo_esc_coeffs_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::traxxas_control::servo_esc_coeffs_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.servo_neutral);
      stream.next(m.esc_neutral);
      stream.next(m.angle_mult);
      stream.next(m.throt_mult);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct servo_esc_coeffs_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::traxxas_control::servo_esc_coeffs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::traxxas_control::servo_esc_coeffs_<ContainerAllocator>& v)
  {
    s << indent << "servo_neutral: ";
    Printer<int32_t>::stream(s, indent + "  ", v.servo_neutral);
    s << indent << "esc_neutral: ";
    Printer<int32_t>::stream(s, indent + "  ", v.esc_neutral);
    s << indent << "angle_mult: ";
    Printer<int32_t>::stream(s, indent + "  ", v.angle_mult);
    s << indent << "throt_mult: ";
    Printer<int32_t>::stream(s, indent + "  ", v.throt_mult);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRAXXAS_CONTROL_MESSAGE_SERVO_ESC_COEFFS_H
